name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linter
      run: npm run lint || true

    - name: Run tests
      run: npm run test || echo "No tests configured"

    - name: Build application
      run: npm run build:all

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service: [dashboard, frontend]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GIT_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.${{ matrix.service }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        script: |
          # Navigate to project directory
          cd /var/www/workers/UzSMSPanel
          
          # Pull latest changes
          git pull origin main
          
          # Login to GitHub Container Registry
          echo ${{ secrets.GIT_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Pull latest images
          docker pull ghcr.io/${{ github.repository }}-dashboard:latest
          docker pull ghcr.io/${{ github.repository }}-frontend:latest
          
          # Stop and remove old containers
          docker compose -f docker-compose.prod.yml down
          
          # Start new containers with latest images
          docker compose -f docker-compose.prod.yml up -d
          
          # Clean up old images
          docker image prune -f
          
          # Check container status
          docker compose -f docker-compose.prod.yml ps

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [test, build-and-push, deploy]
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.deploy.result == 'success'
      run: |
        echo "✅ Deployment successful!"
        echo "Dashboard: http://${{ secrets.SERVER_HOST }}:3000"
        echo "Frontend: http://${{ secrets.SERVER_HOST }}:3001"
    
    - name: Notify Failure
      if: needs.deploy.result == 'failure' || needs.build-and-push.result == 'failure' || needs.test.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        echo "Check the logs for more details."
