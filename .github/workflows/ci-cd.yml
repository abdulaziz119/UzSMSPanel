#name: CI/CD Pipeline
#
#on:
#  push:
#    branches: [main]
#  pull_request:
#    branches: [main]
#
#env:
#  REGISTRY: ghcr.io
#  IMAGE_NAME_FRONTEND: ${{ github.repository }}-frontend
#  IMAGE_NAME_DASHBOARD: ${{ github.repository }}-dashboard
#
#jobs:
#  build-and-test:
#    runs-on: ubuntu-latest
#
#    steps:
#    - name: Checkout code
#      uses: actions/checkout@v4
#
#    - name: Setup Node.js
#      uses: actions/setup-node@v4
#      with:
#        node-version: '18'
#        cache: 'npm'
#
#    - name: Install dependencies
#      run: npm ci
#
#    - name: Run tests
#      run: npm run test
#
#    - name: Build application
#      run: npm run build:all
#
#  build-docker-images:
#    needs: build-and-test
#    runs-on: ubuntu-latest
#    permissions:
#      contents: read
#      packages: write
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Log in to Container Registry
#        uses: docker/login-action@v3
#        with:
#          registry: ${{ env.REGISTRY }}
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#
#      - name: Extract metadata for Frontend
#        id: meta-frontend
#        uses: docker/metadata-action@v5
#        with:
#          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
#          tags: |
#            type=ref,event=branch
#            type=ref,event=pr
#            type=sha,prefix={{branch}}-
#            type=raw,value=latest,enable={{is_default_branch}}
#
#      - name: Extract metadata for Dashboard
#        id: meta-dashboard
#        uses: docker/metadata-action@v5
#        with:
#          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_DASHBOARD }}
#          tags: |
#            type=ref,event=branch
#            type=ref,event=pr
#            type=sha,prefix={{branch}}-
#            type=raw,value=latest,enable={{is_default_branch}}
#
#      - name: Build and push Frontend Docker image
#        uses: docker/build-push-action@v5
#        with:
#          context: .
#          file: ./Dockerfile.frontend
#          push: true
#          tags: ${{ steps.meta-frontend.outputs.tags }}
#          labels: ${{ steps.meta-frontend.outputs.labels }}
#
#      - name: Build and push Dashboard Docker image
#        uses: docker/build-push-action@v5
#        with:
#          context: .
#          file: ./Dockerfile.dashboard
#          push: true
#          tags: ${{ steps.meta-dashboard.outputs.tags }}
#          labels: ${{ steps.meta-dashboard.outputs.labels }}
#
#  deploy-to-production:
#    needs: build-docker-images
#    runs-on: ubuntu-latest
#    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
#
#    steps:
#      - name: Deploy to Production Server
#        uses: appleboy/ssh-action@v1.0.3
#        with:
#          host: ${{ secrets.SERVER_HOST }}
#          username: ${{ secrets.SERVER_USERNAME }}
#          key: ${{ secrets.SERVER_SSH_KEY }}
#          port: ${{ secrets.SERVER_PORT || 22 }}
#          script: |
#            echo "ðŸš€ Starting Docker deployment to PRODUCTION environment..."
#
#            # Navigate to project directory
#            cd /var/www/fix-back || { echo "Project directory not found"; exit 1; }
#
#            # Pull latest changes
#            git fetch origin
#            git checkout main
#            git pull origin main
#
#            # Log in to GitHub Container Registry
#            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
#
#            # Force pull latest images before deployment
#            docker pull ghcr.io/gafurov8020/fix-back-dashboard:latest || exit 1
#            docker pull ghcr.io/gafurov8020/fix-back-frontend:latest || exit 1
#
#            # Run deployment script
#            chmod +x scripts/deploy-prod.sh
#            ./scripts/deploy-prod.sh
#
#            echo "âœ… PRODUCTION environment deployment completed successfully!"
